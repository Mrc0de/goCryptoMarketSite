{{define "pageStyle"}}
<style>
    body {
        padding: 0px;
        margin: 0px;
        background-color: black !important;
    }
    #page {
        min-height:99vh;
        border:none;
        width:100%;
        background-color: black;
    }
    #topBar {
        height:2em;
        min-width: 100%;
        background-color: black;
        border-bottom: thin groove slategray;
        display: grid;
        grid-template-columns: 10% 10% 10% 10% 25% 5% 10% 10% 10%;
        font-size: 1.5vmin !important;
    }
    #topBar > div {
        text-align:center !important;
        align-content: center;
        align-items: center;
    }
    #graphBar {
        height:8em;
        min-width:100%;
        display: grid;
        grid-template-columns: 20% 20% 20% 20% 20%;
    }
    #graphBar > div {
        border:thin inset white;
        color: white;
        text-align: center;
    }
    #topBar img {
        max-height: 2em;
    }

    #wsCommPanel {
        width:100%;
        margin-top: 2em;
    }

    #wsCommPanel > textarea {
        min-height: 25vh;
    }

    #wsCommPanel > textarea, input {
        width: 90%;
        border-radius: 0.25em;
        background-color: darkgray;
        color: white;
    }
    @media only screen and (max-width: 767px) {
        /* Decent Phones */

    }
</style>
{{end}}
{{template "header" .}}
    <div id="page">
        <div id="topBar"></div>
        <div id="contents">
            <div id="graphBar"></div>
            <div id="wsCommPanel"></div>
        </div>
    </div>

    <script type="text/x-template" id="topBarTemplate">
        <div id="topBar">
            <img src="imgs/goCryptoLogo.png" class=""/>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <i class="text-light">[[userName]]</i>
            <a href="/signup" class="text-light">Register Free</a>
            <a href="/login" class="text-light">Login</a>
        </div>
    </script>

    <script type="text/x-template" id="graphBarTemplate">
        <div id="graphBar">
            <div>BTC-USD</div>
            <div>LTC-USD</div>
            <div>ETH-USD</div>
            <div>Gold</div>
            <div>Silver</div>
        </div>
    </script>

    <script type="text/x-template" id="wsCommPanelTemplate">
        <div id="wsCommPanel" class="text-center">
            <textarea id="wsCommOutput" DISABLED>Connecting to GeekProjex.com</textarea>
            <input type="text" id="wsCommInput" placeholder="Type Here" />
        </div>
    </script>


    <script>
        let defaultTicker = null;

        // Top Bar Vue
        let topBarV = new Vue({
            el:"#topBar",
            template:"#topBarTemplate",
            data: {
                tickerTypes: ["BTC","LTC","ETH"],
                tickerPrices: [{ "type":"BTC", "price": 0},{ "type":"ETH", "price": 0},{ "type":"LTC", "price": 0}],
                hasSession: false,
                isLoggedIn: false,
                hasOath: false,
                userName: "Anon" + (Math.floor(Math.random() * Math.floor(999999))).toString(),
                WSConnected: false,
            },
            methods: {

            },
            delimiters: ["[[","]]"],
        });

        //graphBar Vue
        let graphBarV = new Vue({
            el:"#graphBar",
            template:"#graphBarTemplate",
            data: {
            },
            methods: {
            }
        });

        //wsCommPanel Vue
        let wsCommPanelV = new Vue({
            el:"#wsCommPanel",
            template:"#wsCommPanelTemplate",
            data: {
            },
            methods: {
            }
        });

        // Contents Vue
        // let contentsV = new Vue({
        //     el:"#contents",
        //     data: {
        //     },
        //     methods: {
        //     }
        // });

        // Utilities
        function isDef(thing) {
            if ( typeof thing == "undefined" || thing == null) { return false; }
            return true;
        }

        $(function(){
            // Startup
            const socket = new WebSocket('wss://localhost/live');
            wsSetup(socket);
        });

        function wsSetup(socket) {
            // Websocket Setup
            socket.addEventListener('open', function (event) {
                socket.send('Hello Server!');
                topBarV.WSConnected = true;
            });
            socket.addEventListener('message', function (event) {
                console.log('Message from server ', event.data);
            });
            socket.addEventListener('close', function (event) {
                console.log('Disconnected from server ', event.data);
                topbarV.WSConnected = false;
            });
            socket.addEventListener('error', function (event) {
                console.log('Error from server ', event.data);
                topbarV.WSConnected = false;
            });
        }

    </script>
{{template "footer" .}}